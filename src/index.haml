!!!

%html
  %head
    <link href="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.1.1/css/bootstrap-combined.min.css" rel="stylesheet">
    %style
      :plain
        ul {
          font-size: 18px;
          line-height: 30px;
        }
  %body.container
    .hero-unit
      .page-header
        %h1
          <a href='https://github.com/x1024/jquery-fastbutton'>jQuery Fastbutton</a>.
        %h2
          Unobtrusive.
          Zero config.
          <small>Also, working.</small>
      %p
        Most any Mobile Web Developer has heard of Google's seminal "Fastbutton" paper
        %a{ href: 'https://developers.google.com/mobile/articles/fast_buttons' }
          https://developers.google.com/mobile/articles/fast_buttons
      %p
        The paper details a way to make websites feel
        as responsive as native apps - 
        %br
        a critical issue in the fight for the open web.

      %p
        This jQuery plugin builds on top of that foundation
        to make fast webabbs not only possible, but trivial.

      %h3 A bit of history
      %p
        Due to several questionable design decisions,
        the client-side speed of the mobile web was crippled.
        %br
        No matter how skilled, developers could never hope to achieve
        the same speed as native mobile apps - 
        %br
        Simulating "clicks" was artificially and purposefully delayed,
        much to the annoyance of the user.
        %br
        "The Google Paper" mostly solved this problem.
        %br
        Mostly.

      %h3 The current state of the art.
      %p
        The following project
        %br
        %a{ href: 'https://github.com/alexblack/google-fastbutton' }
          https://github.com/alexblack/google-fastbutton
        %br
        is an almost-exact copy of the Google code. In jQuery, the "fastclick"
        event is exposed and it can be used as a normal jQuery event.
        %br
        It works well enough but has the following problems:
        %ul
          %li
            It requires writing new code to support mobile - instead of "click",
            developers must use the "fastClick" event.
          %li
            It requires that every "clicked" object be initialized separately.
            If you ever forget to initialize a single one - well, tough luck.
          %li
            It cannot be used with <em>$.fn.live</em>.
            In fact, when used that way it breaks every single non-"fastclick"
            button or link on the page without notice.
          %li
            It doesn't provide any useful defaults.
            Not only does every link have to be setup separately,
            but every type of link has to be setup manually.
          %li
            It sets up a different event listener for every element.
            On a site with hundreds of clickable links, this is undesirable.
            Yeah, RAM is cheap but come on.
      %h2 Enter <a href='https://github.com/x1024/jquery-fastbutton'>jQuery-fastbutton</a>
      %p <a href='https://github.com/x1024/jquery-fastbutton'>jQuery-fastbutton</a> simplifies all this.
      %p
        It...
        %ul
          %li is unobtrusive - no change to existing JS requried! 
          %li provides decent defaults.
          %li is initialized only once.
          %li handles both currently existing and future links.
          %li has fewer event listeners.

      %h3 Zero-config usage
      %p
        Just include this script:
        %br
        %pre
          :plain
            &lt;script src='https://raw.github.com/x1024/jquery-fastbutton/master/bin/fastbutton.js'&gt;&lt;/script&gt;
        %br
        And make sure your &lt;body&gt; tag looks like this:
        %pre
          :plain
            &lt;body class='use-fastclick'&gt;

        %p This will do the following things:
        %ul
          %li
            All links will be fast-clickable.
            %br
            %pre &lt;a href='http://www.google.com'&gt;Google&lt;/a&gt;
          %li
            All links that open in a new tab will be fast-clickable.
            (standard caveats to opening tabs via JS apply)
            %br
            %pre &lt;a href='http://www.google.com' target='_blank'&gt;Google&lt;/a&gt;
          %li
            Text input fields will be fast-selectable.
            %br
            %pre &lt;input type='text' placeholder='click me'/&gt;
          %li
            Forms will be fast-submittable.
            (standard caveats to submitting via JS apply)
            %pre &lt;input type='submit' value='submit me'/&gt;
          %li
            All links that have the "fastClick" class will be fast-clickable.
            %br
            %pre &lt;a class="fastClick"&gt;I have a JS handler&lt;/a&gt;
          %li
            All links that follow the Rails "data-remote" convention will be fast-clickable.
            %br
            %pre &lt;a data-remote='true'&gt;I have a JS handler, too&lt;/a&gt;

      %p
        This includes both currently present and future links/inputs/submits
      %p
        Additionally, you can customize the https://github.com/x1024/jquery-fastbutton

      %h3 Customizable Usage
      %p
        Do this:
        :plain
          <pre>$('a').fastButton(function(event) {
            alert("Now you're clicking with gas");
          })</pre>
      %p
        Every place where you would normally write
        <code>$('...').live('click', ...)</code>,
        you can also write
        <code>$('...').fastButton('click', ...)</code>
      %p
        Internally, <a href='https://github.com/x1024/jquery-fastbutton'>jQuery-fastButton</a> uses <code>$.fn.live</code> so any place
        where you could <em>not</em> use <code>$('...').live</code>,
        you also won't be able to use <code>$('...').fastButton</code>

      %h3 Demo
      %p
        Using a mobile device, try and tap on those buttons -
        see how they have a delay.
      .demo.no-fastclick
        %a{ href: '#' }I am slow.
        %br
        %br
        %input{ type: 'text', value: 'I am slow-focused' }
        %div{ 'data-clicks': 0 }
        %br
        %br
        %form{ action: '/' }
          %input{ type: 'submit', value: 'I am slow-submitted' }
          %div{ 'data-clicks': 0 }

      %p
        Then, try and tap on these.
        Whoa. Yeah, I know.
      .demo.use-fastclick
        %a.fastClick{ href: '#' }I am fast.
        %br
        %br
        %input{ type: 'text', value: 'I am fast-focused' }
        %div{ 'data-clicks': 0 }
        %br
        %br
        %form{ action: '/' }
          %input{ type: 'submit', value: 'I am fast-submitted' }
          %div{ 'data-clicks': 0 }

      %br
      %br
      %h3 Caveats
      %p
        Be warned, while super fast buttons are awesome -
        there are still some things to watch out for.
        %ul
          %li
            Alerts don't work right -
            when an alert is fired in a "click" handler,
            all the touchstart/touchend/click events get jumbled up and bad things happen.
          %li
            Scrolling requires extra attention - 
            Sometimes a user will attempt to "scroll" by dragging the screen, but will end up "clicking".
            This is not a bug in the code, but rather just the way buttons work.
            Still, you should leave enough whitespace on your page so people can drag that to scroll.


      %br
      %br
      %h2 After all, speed is the biggest feature.
      <iframe width="420" height="315" src="http://www.youtube.com/embed/1bb5_AJFl_4" frameborder="0" allowfullscreen></iframe>

    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
    /
      <script src="https://raw.github.com/x1024/jquery-fastbutton/master/bin/fastbutton.js"></script>
    <script src="./fastbutton.js"></script>
    %script
      :plain
        $('.demo a').click(function() {
          $btn = $(this).next();
          clicks = parseInt($btn.data('clicks'), 10) + 1
          $btn.text("You clicked {clicks} times")
          return false;
        });
        $('.demo form').submit(function() {
          $btn = $(this).next();
          clicks = parseInt($btn.data('clicks'), 10) + 1
          $btn.text("You submitted {clicks} times")
          return false;
        });
